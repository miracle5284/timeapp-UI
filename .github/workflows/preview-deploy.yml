name: Preview Deploy PR

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [master]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  upgrade:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upgrade App Service Plan to Standard (S1)
        run: |
          az appservice plan update \
            --name ${{ secrets.AZURE_PLAN_NAME }} \
            --resource-group ${{ secrets.AZURE_RG }} \
            --sku S1

      - name: Wait for Upgrade to Complete (max 6 mins)
        run: |
          set -euo pipefail
          echo "‚è≥ Waiting for App Service Plan to upgrade to Standard (S1)..."

          timeout_limit=360  # seconds
          check_interval=10
          start_time=$(date +%s)

          while true; do
            current_sku=$(az appservice plan show \
              --name "${{ secrets.AZURE_PLAN_NAME }}" \
              --resource-group "${{ secrets.AZURE_RG }}" \
              --query "sku.name" -o tsv || echo "error")

            if [ "$current_sku" = "S1" ]; then
              echo "‚úÖ Upgrade complete. Current SKU: $current_sku"
              break
            fi

            now=$(date +%s)
            elapsed=$((now - start_time))

            if [ "$elapsed" -ge "$timeout_limit" ]; then
              echo "‚ùå Timeout after ${elapsed}s. Upgrade did not complete."
              exit 1
            fi

            echo "‚è≥ Still upgrading... (elapsed: ${elapsed}s, current SKU: $current_sku)"
            sleep "$check_interval"
          done

  preview:
    if: github.event.action != 'closed'
    needs: upgrade
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true  # üëà So we can catch failure

    steps:
      - uses: actions/checkout@v3

      - name: Set slot name
        id: slot
        run: echo "slot=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.REGISTRY_NAME }}/chrona-frontend:pr-${{ github.event.number }} .

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_NAME }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.REGISTRY_NAME }}/chrona-frontend:pr-${{ github.event.number }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure PR Slot Exists
        run: |
          SLOT_NAME="pr-${{ github.event.number }}"
          echo "üîç Checking if slot '$SLOT_NAME' exists..."
          if az webapp deployment slot show \
            --name "${{ secrets.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ secrets.AZURE_RG }}" \
            --slot "$SLOT_NAME" &> /dev/null; then
            echo "‚úÖ Slot already exists."
          else
            echo "üì¶ Creating slot '$SLOT_NAME'..."
            az webapp deployment slot create \
              --name "${{ secrets.AZURE_WEBAPP_NAME }}" \
              --resource-group "${{ secrets.AZURE_RG }}" \
              --slot "$SLOT_NAME" \
              --configuration-source "${{ secrets.AZURE_WEBAPP_NAME }}"
          fi

      - name: Deploy to Azure PR Slot
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          slot-name: pr-${{ github.event.number }}
          images: ${{ secrets.REGISTRY_NAME }}/chrona-frontend:pr-${{ github.event.number }}

      - name: Comment Preview URL
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.issue.number;
            const appName = process.env.AZURE_WEBAPP_NAME;
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üß™ Preview deployed: https://${appName}-pr-${prNumber}.azurewebsites.net`
            })
        env:
          AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}

      - name: Downgrade ASP to B1 on Failure (with cleanup)
        if: failure()
        run: |
          echo "‚ö†Ô∏è Something went wrong. Cleaning up preview slots and downgrading to B1..."

          RESOURCE_GROUP="${{ secrets.AZURE_RG }}"
          APP_NAME="${{ secrets.AZURE_WEBAPP_NAME }}"
          PLAN_NAME="${{ secrets.AZURE_PLAN_NAME }}"

          echo "üîç Fetching slots..."
          slots=$(az webapp deployment slot list \
            --name "$APP_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --query "[].name" -o tsv)

          for slot in $slots; do
            # skip the default slot (same name as app)
            if [[ "$slot" == "$APP_NAME/pr-"* ]]; then
              SLOT_NAME="${slot##*/}"  # extract only the slot name
              echo "üßπ Deleting slot: $SLOT_NAME"
              az webapp deployment slot delete \
                --name "$APP_NAME" \
                --resource-group "$RESOURCE_GROUP" \
                --slot "$SLOT_NAME"
            fi
          done

          echo "‚¨áÔ∏è Downgrading plan to Basic (B1)..."
          az appservice plan update \
            --name "$PLAN_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --sku B1  

  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Delete Preview Slot
        run: |
          echo "üßπ Deleting preview deployment slot..."
          az webapp deployment slot delete \
            --name ${{ secrets.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ secrets.AZURE_RG }} \
            --slot preview || echo "‚ùó Slot may not exist, skipping."

      - name: Downgrade App Service Plan to Basic (B1)
        run: |
          echo "‚¨áÔ∏è Downgrading App Service Plan to Basic (B1)..."
          az appservice plan update \
            --name ${{ secrets.AZURE_PLAN_NAME }} \
            --resource-group ${{ secrets.AZURE_RG }} \
            --sku B1
