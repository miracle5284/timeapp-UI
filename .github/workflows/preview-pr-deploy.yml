name: PR Preview Deploy (Isolated App)

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [master]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  preview:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: preview

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set variables
        id: vars
        run: |
          echo "app=pr-${{ github.event.number }}-chrona-frontend" >> $GITHUB_OUTPUT
          echo "plan=pr-${{ github.event.number }}-chrona-plan" >> $GITHUB_OUTPUT
          VALUE=$(az keyvault secret show --vault-name ${{ secrets.KEY_VAULT_NAME }} --name "BASE-URL" --query "value" -o tsv)
          echo "backend_url=$VALUE" >> $GITHUB_OUTPUT

      - name: Build & Push Docker Image
        run: |
          docker build \
            --build-arg BACKEND_URL=${{ steps.vars.outputs.backend_url }} \
            -t ${{ secrets.REGISTRY_NAME }}/chrona-frontend:pr-${{ github.event.number }} .
          echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.REGISTRY_NAME }} -u ${{ secrets.ACR_USERNAME }} --password-stdin
          docker push ${{ secrets.REGISTRY_NAME }}/chrona-frontend:pr-${{ github.event.number }}

      - name: Delete existing app/plan if already present
        env:
          APP: ${{ steps.vars.outputs.app }}
          PLAN: ${{ steps.vars.outputs.plan }}
          RG: ${{ secrets.AZURE_RG }}
        run: |
          echo "üßπ Checking for existing app: $APP"
          if az webapp show --name "$APP" --resource-group "$RG" &>/dev/null; then
            az webapp delete --name "$APP" --resource-group "$RG"
            echo "‚åõ Waiting for app to be deleted..."
            for i in {1..12}; do
              sleep 10
              if ! az webapp show --name "$APP" --resource-group "$RG" &>/dev/null; then
                echo "‚úÖ App deleted."
                break
              fi
              echo "‚è≥ Still deleting... ($i/12)"
            done
          else
            echo "No app to delete."
          fi

          echo "üßπ Checking for existing plan: $PLAN"
          if az appservice plan show --name "$PLAN" --resource-group "$RG" &>/dev/null; then
            az appservice plan delete --name "$PLAN" --resource-group "$RG" --yes
          else
            echo "No plan to delete."
          fi

      - name: Deploy App
        id: deploy_app
        run: |
          APP=${{ steps.vars.outputs.app }}
          PLAN=${{ steps.vars.outputs.plan }}
          RG=${{ secrets.AZURE_RG }}
      
          echo "üßπ Deploying app with plan: $PLAN"
          
          # Try initial deployment
          deployment_output=$(az deployment group create \
            --resource-group "$RG" \
            --template-file infrastructure/preview-app.bicep \
            --parameters \
              appServiceName=${{ steps.vars.outputs.app }} \
              appServicePlan=${{ steps.vars.outputs.plan }} \
              imageName=${{ secrets.REGISTRY_NAME }}/chrona-frontend:pr-${{ github.event.number }} \
              registryUrl=https://${{ secrets.REGISTRY_NAME }} \
              acrUsername=${{ secrets.ACR_USERNAME }} \
              acrPassword=${{ secrets.ACR_PASSWORD }} \
            --output json)

          # Check if deployment failed due to capacity conflict
          deployment_status=$(echo "$deployment_output" | grep -o '"status":"[A-Za-z]*"' | awk -F ':"' '{print $2}' | tr -d '"')

          if [ "$deployment_status" == "Failed" ]; then
            # Extract detailed error message
            error_message=$(echo "$deployment_output" | grep -o '"message":"[^"]*"' | awk -F ':"' '{print $2}' | tr -d '"')

            # If it's a capacity issue, retry with different plan
            if [[ "$error_message" == *"No available instances to satisfy this request"* ]]; then
              echo "‚ùå Deployment failed due to capacity issue. Retrying with chronaplan-pr-1..."

              PLAN="chronaplan-pr-1"  # Switch to the fallback plan

              deployment_output=$(az deployment group create \
                --resource-group "$RG" \
                --template-file infrastructure/preview-app.bicep \
                --parameters \
                  appServiceName=$APP \
                  appServicePlan=$PLAN \
                  imageName=${{ secrets.REGISTRY_NAME }}/chrona-frontend:pr-${{ github.event.number }} \
                  registryUrl=https://${{ secrets.REGISTRY_NAME }} \
                  acrUsername=${{ secrets.ACR_USERNAME }} \
                  acrPassword=${{ secrets.ACR_PASSWORD }} \
                --output json)

              deployment_status=$(echo "$deployment_output" | grep -o '"status":"[A-Za-z]*"' | awk -F ':"' '{print $2}' | tr -d '"')

              if [ "$deployment_status" == "Succeeded" ]; then
                echo "‚úÖ Deployment with $PLAN succeeded!"
              else
                echo "‚ùå Deployment with fallback plan chronaplan-pr-1 also failed!"
                exit 1
              fi
            else
              echo "‚ùå Deployment failed for a reason other than capacity issue: $error_message"
              exit 1
            fi
          else
            echo "‚úÖ Deployment succeeded!"
          fi


      - name: Enable Continuous Deployment
        run: |
          az webapp deployment container config \
            --enable-cd true \
            --name ${{ steps.vars.outputs.app }} \
            --resource-group ${{ secrets.AZURE_RG }}

      - name: Update ALLOWED_HOSTS and CORS_ALLOWED_ORIGINS and FRONTEND_URL in Vault
        run: |
          APP_URL="https://${{ steps.vars.outputs.app }}.azurewebsites.net"
          VAULT_NAME=${{ secrets.KEY_VAULT_NAME }}

          echo "Fetching existing ALLOWED-HOSTS..."
          EXISTING_ALLOWED=$(az keyvault secret show --vault-name "$VAULT_NAME" --name "ALLOWED-HOSTS" --query "value" -o tsv)

          echo "Fetching existing CORS-ALLOWED-ORIGINS..."
          EXISTING_CORS=$(az keyvault secret show --vault-name "$VAULT_NAME" --name "CORS-ALLOWED-ORIGINS" --query "value" -o tsv)
          
          echo "Fetching existing FRONTEND-URL..."
          EXISTING_FRONTEND_URL=$(az keyvault secret show --vault-name "$VAULT_NAME" --name "FRONTEND-URL" --query "value" -o tsv)

          echo "Updating ALLOWED_HOSTS..."
          if [[ "$EXISTING_ALLOWED" == *"$APP_URL"* ]]; then
            echo "Already present, skipping."
            UPDATED_ALLOWED="$EXISTING_ALLOWED"
          else
            UPDATED_ALLOWED="${EXISTING_ALLOWED:+$EXISTING_ALLOWED,}$APP_URL"
            az keyvault secret set --vault-name "$VAULT_NAME" --name "ALLOWED-HOSTS" --value "$UPDATED_ALLOWED"
          fi

          echo "Updating CORS_ALLOWED_ORIGINS..."
          if [[ "$EXISTING_CORS" == *"$APP_URL"* ]]; then
            echo "Already present, skipping."
            UPDATED_CORS="$EXISTING_CORS"
          else
            UPDATED_CORS="${EXISTING_CORS:+$EXISTING_CORS,}$APP_URL"
            az keyvault secret set --vault-name "$VAULT_NAME" --name "CORS-ALLOWED-ORIGINS" --value "$UPDATED_CORS"
          fi
          
          echo "Updating FRONTEND-URL..."
          if [[ "$EXISTING_FRONTEND_URL" == *"$APP_URL"* ]]; then
            echo "Already present, skipping."
            UPDATED_FRONTEND_URL="$EXISTING_FRONTEND_URL"
          else
            UPDATED_FRONTEND_URL="${EXISTING_FRONTEND_URL:+$EXISTING_FRONTEND_URL,}$APP_URL"
            az keyvault secret set --vault-name "$VAULT_NAME" --name "FRONTEND_URL" --value "$UPDATED_FRONTEND_URL"
          fi

      - name: Update backend Container App env vars
        run: |
          BACKEND_APP=${{ secrets.BACKEND_CONTAINER_APP_NAME }}
          RG=${{ secrets.AZURE_RG }}
          VAULT_NAME=${{ secrets.KEY_VAULT_NAME }}

          echo "Fetching updated ALLOWED_HOSTS and CORS_ALLOWED_ORIGINS from Vault..."
          NEW_ALLOWED=$(az keyvault secret show --vault-name "$VAULT_NAME" --name "ALLOWED-HOSTS" --query "value" -o tsv)
          NEW_CORS=$(az keyvault secret show --vault-name "$VAULT_NAME" --name "CORS-ALLOWED-ORIGINS" --query "value" -o tsv)

          echo "Updating backend container app env vars..."
          
          az containerapp secret set --name "$BACKEND_APP" --resource-group "$RG" \
            --secrets "allowed-hosts=$NEW_ALLOWED cors-allowed-origins=$NEW_CORS"

      - name: Comment Preview URL
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üß™ Preview deployed: https://${{ steps.vars.outputs.app }}.azurewebsites.net`
            })

  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Azure Login
        uses: azure/login@v2.2.0
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Cleanup App Service and Plan
        run: |
          APP=${{ steps.vars.outputs.app }}
          PLAN=${{ steps.vars.outputs.plan }}
          RG=${{ secrets.AZURE_RG }}
          
          echo "üßπ Checking for app: $APP"
          
          if [ "$PLAN" != "chronaplan-pr-1" ]; then
            echo "üßπ Deleting App and App Service Plan: $PLAN"
          
            # Delete both App and App Service Plan
            az webapp delete --name "$APP" --resource-group "$RG"
            az appservice plan delete --name "$PLAN" --resource-group "$RG" --yes
            echo "‚úÖ App and Service Plan deleted."
          else
            echo "‚ö†Ô∏è Skipping Service Plan Deletion for $PLAN"
          
            # Only delete the app, keep the plan
            az webapp delete --name "$APP" --resource-group "$RG"
            echo "‚úÖ App deleted. Service Plan $PLAN retained."
          fi

      - name: Remove Preview URL from ALLOWED_HOSTS and CORS_ALLOWED_ORIGINS
        run: |
          APP_URL="https://pr-${{ github.event.number }}-chrona-frontend.azurewebsites.net"
          VAULT_NAME=${{ secrets.KEY_VAULT_NAME }}

          echo "Fetching current ALLOWED_HOSTS and CORS_ALLOWED_ORIGINS..."
          EXISTING_ALLOWED=$(az keyvault secret show --vault-name "$VAULT_NAME" --name "ALLOWED-HOSTS" --query "value" -o tsv)
          EXISTING_CORS=$(az keyvault secret show --vault-name "$VAULT_NAME" --name "CORS-ALLOWED-ORIGINS" --query "value" -o tsv)

          echo "Removing APP_URL from ALLOWED_HOSTS..."
          UPDATED_ALLOWED=$(echo "$EXISTING_ALLOWED" | sed "s#${APP_URL},*##g" | sed 's#,,#,#g' | sed 's#^,\|,$##g')
          az keyvault secret set --vault-name "$VAULT_NAME" --name "ALLOWED-HOSTS" --value "$UPDATED_ALLOWED"

          echo "Removing APP_URL from CORS_ALLOWED_ORIGINS..."
          UPDATED_CORS=$(echo "$EXISTING_CORS" | sed "s#${APP_URL},*##g" | sed 's#,,#,#g' | sed 's#^,\|,$##g')
          az keyvault secret set --vault-name "$VAULT_NAME" --name "CORS-ALLOWED-ORIGINS" --value "$UPDATED_CORS"

      - name: Update backend Container App env vars
        run: |
          BACKEND_APP=${{ secrets.BACKEND_CONTAINER_APP_NAME }}
          RG=${{ secrets.AZURE_RG }}
          VAULT_NAME=${{ secrets.KEY_VAULT_NAME }}

          echo "Fetching updated ALLOWED_HOSTS and CORS_ALLOWED_ORIGINS..."
          NEW_ALLOWED=$(az keyvault secret show --vault-name "$VAULT_NAME" --name "ALLOWED-HOSTS" --query "value" -o tsv)
          NEW_CORS=$(az keyvault secret show --vault-name "$VAULT_NAME" --name "CORS-ALLOWED-ORIGINS" --query "value" -o tsv)

          echo "Updating backend container app env vars..."
          az containerapp secret set --name "$BACKEND_APP" --resource-group "$RG" \
            --secrets "allowed-hosts=$NEW_ALLOWED cors-allowed-origins=$NEW_CORS"

